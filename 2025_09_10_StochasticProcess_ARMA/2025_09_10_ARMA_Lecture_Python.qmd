---
title: "2025_09_10 Stochastic Processes, ARMA Processes, lecture notes"
format:
  html:
    toc: true
bibliography: "../forecasting.bib"
link-citations: true 
csl: "../apa-6th-edition.csl"
---

```{python}
#####################################################################
##########       Lab Practice 2:      ARMA models         ###########
#####################################################################
```

# Load the required libraries

```{r echo=FALSE, results='hide'}
library(reticulate)
use_condaenv("fc", required = TRUE)
```



```{python}
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.stattools import acf, pacf
import statsmodels.api as sm
```

# White Noise

We will create a Gaussian white noise time series.  

```{python}
n = 150
z = np.random.normal(loc=0, scale=1, size=n)
z[:30]
```

Convert to a pandas Series with integer index:  

```{python}
w = pd.Series(z, index=np.arange(1, n+1))
w.head(25)
```

## Time plot of the white noise time series:

```{python}
plt.figure(figsize=(10,4))
plt.plot(w, label="White noise")
plt.scatter(w.index, w, color="blue", s=15)
plt.title("White noise")
plt.legend()
plt.show()
```

## ACF and PACF of white noise

```{python}
fig, axes = plt.subplots(1, 2, figsize=(12,4))
plot_acf(w, lags=20, ax=axes[0])
plot_pacf(w, lags=20, ax=axes[1], method="ywm")
plt.show()
```

# Random Walks

A random walk is an stochastic process usually defined by:
$$y_t = k + y_{t-1} + w_t$$

```{python}
np.random.seed(2024)
n = 1000
k = 0.1

w = 10 * np.random.normal(size=n)
rw_ts = pd.Series(k * np.arange(1, n+1) + np.cumsum(w))
```

Plot:

```{python}
plt.figure(figsize=(10,4))
plt.plot(rw_ts)
plt.title("Random walk with drift")
plt.show()
```

## ACF and PACF of random walk

```{python}
fig, axes = plt.subplots(1, 2, figsize=(12,4))
plot_acf(rw_ts, lags=50, ax=axes[0])
plot_pacf(rw_ts, lags=50, ax=axes[1], method="ywm")
plt.show()
```

# ACF for a Seasonal Series

Weâ€™ll use the classic **AirPassengers** dataset from R (available in `statsmodels`):

```{python}
import statsmodels.datasets
data = statsmodels.datasets.get_rdataset('AirPassengers').data
# data = airpassengers.load_pandas().data
AirPassengers = pd.Series(data['value'].values, 
                          index=pd.date_range("1949-01", periods=len(data), freq="ME"))
```

Time plot:

```{python}
AirPassengers.plot(figsize=(10,4), title="AirPassengers")
plt.show()
```

## ACF and PACF

```{python}
fig, axes = plt.subplots(1, 2, figsize=(12,4))
plot_acf(AirPassengers, lags=40, ax=axes[0])
plot_pacf(AirPassengers, lags=40, ax=axes[1], method="ywm")
plt.show()
```

Examine numerical ACF values:

```{python}
acf_vals = acf(AirPassengers, nlags=24)
acf_vals
```

## Lag plots

```{python}
from pandas.plotting import lag_plot

plt.figure(figsize=(4,4))
lag_plot(AirPassengers, lag=12)
plt.title("Lag plot (lag=12)")
plt.show()
```

## Time plot of original vs lagged series

```{python}
k = 7
lagged = AirPassengers.shift(k)

AirPassengers_lag = pd.DataFrame({
    "Original": AirPassengers,
    f"Lag {k}": lagged
})

AirPassengers_lag.head(k+2)
```

```{python}
plt.figure(figsize=(10,4))
plt.plot(AirPassengers_lag["Original"], label="Original")
plt.plot(AirPassengers_lag[f"Lag {k}"], label=f"Lag {k}")
plt.title("AirPassengers and Lagged Series")
plt.legend()
plt.show()
```
